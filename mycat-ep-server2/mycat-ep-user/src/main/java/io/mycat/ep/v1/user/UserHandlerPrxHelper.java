// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `User.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package io.mycat.ep.v1.user;

public final class UserHandlerPrxHelper extends Ice.ObjectPrxHelperBase implements UserHandlerPrx
{
    private static final String __changePassword_name = "changePassword";

    public UserCommonResult changePassword(long userId, String smsCode, String newPassword)
    {
        return changePassword(userId, smsCode, newPassword, null, false);
    }

    public UserCommonResult changePassword(long userId, String smsCode, String newPassword, java.util.Map<String, String> __ctx)
    {
        return changePassword(userId, smsCode, newPassword, __ctx, true);
    }

    private UserCommonResult changePassword(long userId, String smsCode, String newPassword, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__changePassword_name);
        return end_changePassword(begin_changePassword(userId, smsCode, newPassword, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword)
    {
        return begin_changePassword(userId, smsCode, newPassword, null, false, false, null);
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword, java.util.Map<String, String> __ctx)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword, Ice.Callback __cb)
    {
        return begin_changePassword(userId, smsCode, newPassword, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword, Callback_UserHandler_changePassword __cb)
    {
        return begin_changePassword(userId, smsCode, newPassword, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(long userId, String smsCode, String newPassword, java.util.Map<String, String> __ctx, Callback_UserHandler_changePassword __cb)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(long userId, 
                                                String smsCode, 
                                                String newPassword, 
                                                IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changePassword(userId, smsCode, newPassword, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changePassword(long userId, 
                                                String smsCode, 
                                                String newPassword, 
                                                IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changePassword(userId, smsCode, newPassword, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_changePassword(long userId, 
                                                String smsCode, 
                                                String newPassword, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changePassword(long userId, 
                                                String smsCode, 
                                                String newPassword, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_changePassword(long userId, 
                                                 String smsCode, 
                                                 String newPassword, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changePassword(userId, smsCode, newPassword, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.user.UserCommonResult>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                UserHandlerPrxHelper.__changePassword_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_changePassword(long userId, 
                                                 String smsCode, 
                                                 String newPassword, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changePassword_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__changePassword_name, __cb);
        try
        {
            __result.prepare(__changePassword_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(userId);
            __os.writeString(smsCode);
            __os.writeString(newPassword);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserCommonResult end_changePassword(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __changePassword_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserCommonResult __ret = null;
            __ret = UserCommonResult.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __changePassword_completed(Ice.TwowayCallbackArg1<UserCommonResult> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.user.UserHandlerPrx __proxy = (io.mycat.ep.v1.user.UserHandlerPrx)__result.getProxy();
        UserCommonResult __ret = null;
        try
        {
            __ret = __proxy.end_changePassword(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __login_name = "login";

    public UserSession login(ClientInfo info)
    {
        return login(info, null, false);
    }

    public UserSession login(ClientInfo info, java.util.Map<String, String> __ctx)
    {
        return login(info, __ctx, true);
    }

    private UserSession login(ClientInfo info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__login_name);
        return end_login(begin_login(info, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_login(ClientInfo info)
    {
        return begin_login(info, null, false, false, null);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, java.util.Map<String, String> __ctx)
    {
        return begin_login(info, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, Ice.Callback __cb)
    {
        return begin_login(info, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(info, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, Callback_UserHandler_login __cb)
    {
        return begin_login(info, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, java.util.Map<String, String> __ctx, Callback_UserHandler_login __cb)
    {
        return begin_login(info, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, 
                                       IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(info, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, 
                                       IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(info, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(info, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(ClientInfo info, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(info, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_login(ClientInfo info, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(info, __ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.user.UserSession>(__responseCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       UserHandlerPrxHelper.__login_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_login(ClientInfo info, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__login_name, __cb);
        try
        {
            __result.prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ClientInfo.__write(__os, info);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserSession end_login(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __login_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserSession __ret = null;
            __ret = UserSession.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __login_completed(Ice.TwowayCallbackArg1<UserSession> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.user.UserHandlerPrx __proxy = (io.mycat.ep.v1.user.UserHandlerPrx)__result.getProxy();
        UserSession __ret = null;
        try
        {
            __ret = __proxy.end_login(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __regist_name = "regist";

    public UserSession regist(ClientInfo info)
    {
        return regist(info, null, false);
    }

    public UserSession regist(ClientInfo info, java.util.Map<String, String> __ctx)
    {
        return regist(info, __ctx, true);
    }

    private UserSession regist(ClientInfo info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__regist_name);
        return end_regist(begin_regist(info, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_regist(ClientInfo info)
    {
        return begin_regist(info, null, false, false, null);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, java.util.Map<String, String> __ctx)
    {
        return begin_regist(info, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, Ice.Callback __cb)
    {
        return begin_regist(info, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_regist(info, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, Callback_UserHandler_regist __cb)
    {
        return begin_regist(info, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, java.util.Map<String, String> __ctx, Callback_UserHandler_regist __cb)
    {
        return begin_regist(info, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, 
                                        IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_regist(info, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, 
                                        IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_regist(info, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_regist(info, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_regist(ClientInfo info, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_regist(info, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_regist(ClientInfo info, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<UserSession> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_regist(info, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.user.UserSession>(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        UserHandlerPrxHelper.__regist_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_regist(ClientInfo info, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__regist_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__regist_name, __cb);
        try
        {
            __result.prepare(__regist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ClientInfo.__write(__os, info);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserSession end_regist(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __regist_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserSession __ret = null;
            __ret = UserSession.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __regist_completed(Ice.TwowayCallbackArg1<UserSession> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.user.UserHandlerPrx __proxy = (io.mycat.ep.v1.user.UserHandlerPrx)__result.getProxy();
        UserSession __ret = null;
        try
        {
            __ret = __proxy.end_regist(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __sendSMSCode_name = "sendSMSCode";

    public UserCommonResult sendSMSCode(String phone)
    {
        return sendSMSCode(phone, null, false);
    }

    public UserCommonResult sendSMSCode(String phone, java.util.Map<String, String> __ctx)
    {
        return sendSMSCode(phone, __ctx, true);
    }

    private UserCommonResult sendSMSCode(String phone, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__sendSMSCode_name);
        return end_sendSMSCode(begin_sendSMSCode(phone, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone)
    {
        return begin_sendSMSCode(phone, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, java.util.Map<String, String> __ctx)
    {
        return begin_sendSMSCode(phone, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, Ice.Callback __cb)
    {
        return begin_sendSMSCode(phone, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendSMSCode(phone, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, Callback_UserHandler_sendSMSCode __cb)
    {
        return begin_sendSMSCode(phone, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, java.util.Map<String, String> __ctx, Callback_UserHandler_sendSMSCode __cb)
    {
        return begin_sendSMSCode(phone, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, 
                                             IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendSMSCode(phone, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, 
                                             IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendSMSCode(phone, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_sendSMSCode(phone, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendSMSCode(String phone, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendSMSCode(phone, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_sendSMSCode(String phone, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<UserCommonResult> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_sendSMSCode(phone, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.user.UserCommonResult>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             UserHandlerPrxHelper.__sendSMSCode_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_sendSMSCode(String phone, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendSMSCode_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__sendSMSCode_name, __cb);
        try
        {
            __result.prepare(__sendSMSCode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(phone);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public UserCommonResult end_sendSMSCode(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __sendSMSCode_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            UserCommonResult __ret = null;
            __ret = UserCommonResult.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __sendSMSCode_completed(Ice.TwowayCallbackArg1<UserCommonResult> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.user.UserHandlerPrx __proxy = (io.mycat.ep.v1.user.UserHandlerPrx)__result.getProxy();
        UserCommonResult __ret = null;
        try
        {
            __ret = __proxy.end_sendSMSCode(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static UserHandlerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static UserHandlerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static UserHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static UserHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static UserHandlerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static UserHandlerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, UserHandlerPrx.class, UserHandlerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::user::UserHandler"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, UserHandlerPrx v)
    {
        __os.writeProxy(v);
    }

    public static UserHandlerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserHandlerPrxHelper result = new UserHandlerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
