// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `goods.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package io.mycat.ep.v1.goods.stock;

public final class GoodsStorageManageHandlerPrxHelper extends Ice.ObjectPrxHelperBase implements GoodsStorageManageHandlerPrx
{
    private static final String __changeStorage_name = "changeStorage";

    public StorageChangeResult changeStorage(StorageChange change)
    {
        return changeStorage(change, null, false);
    }

    public StorageChangeResult changeStorage(StorageChange change, java.util.Map<String, String> __ctx)
    {
        return changeStorage(change, __ctx, true);
    }

    private StorageChangeResult changeStorage(StorageChange change, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__changeStorage_name);
        return end_changeStorage(begin_changeStorage(change, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change)
    {
        return begin_changeStorage(change, null, false, false, null);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, java.util.Map<String, String> __ctx)
    {
        return begin_changeStorage(change, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, Ice.Callback __cb)
    {
        return begin_changeStorage(change, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeStorage(change, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, Callback_GoodsStorageManageHandler_changeStorage __cb)
    {
        return begin_changeStorage(change, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, java.util.Map<String, String> __ctx, Callback_GoodsStorageManageHandler_changeStorage __cb)
    {
        return begin_changeStorage(change, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                               IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeStorage(change, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                               IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorage(change, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeStorage(change, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorage(change, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorage(change, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.goods.stock.StorageChangeResult>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               GoodsStorageManageHandlerPrxHelper.__changeStorage_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_changeStorage(StorageChange change, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeStorage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__changeStorage_name, __cb);
        try
        {
            __result.prepare(__changeStorage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StorageChange.__write(__os, change);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public StorageChangeResult end_changeStorage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __changeStorage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            StorageChangeResult __ret = null;
            __ret = StorageChangeResult.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __changeStorage_completed(Ice.TwowayCallbackArg1<StorageChangeResult> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx __proxy = (io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx)__result.getProxy();
        StorageChangeResult __ret = null;
        try
        {
            __ret = __proxy.end_changeStorage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __changeStorageBatch_name = "changeStorageBatch";

    public StorageChangeResult changeStorageBatch(StorageChange[] change)
    {
        return changeStorageBatch(change, null, false);
    }

    public StorageChangeResult changeStorageBatch(StorageChange[] change, java.util.Map<String, String> __ctx)
    {
        return changeStorageBatch(change, __ctx, true);
    }

    private StorageChangeResult changeStorageBatch(StorageChange[] change, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__changeStorageBatch_name);
        return end_changeStorageBatch(begin_changeStorageBatch(change, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change)
    {
        return begin_changeStorageBatch(change, null, false, false, null);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, java.util.Map<String, String> __ctx)
    {
        return begin_changeStorageBatch(change, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, Ice.Callback __cb)
    {
        return begin_changeStorageBatch(change, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeStorageBatch(change, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, Callback_GoodsStorageManageHandler_changeStorageBatch __cb)
    {
        return begin_changeStorageBatch(change, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, java.util.Map<String, String> __ctx, Callback_GoodsStorageManageHandler_changeStorageBatch __cb)
    {
        return begin_changeStorageBatch(change, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                    IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeStorageBatch(change, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                    IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorageBatch(change, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeStorageBatch(change, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorageBatch(change, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<StorageChangeResult> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeStorageBatch(change, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.goods.stock.StorageChangeResult>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    GoodsStorageManageHandlerPrxHelper.__changeStorageBatch_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_changeStorageBatch(StorageChange[] change, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changeStorageBatch_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__changeStorageBatch_name, __cb);
        try
        {
            __result.prepare(__changeStorageBatch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StorageChangeSeqHelper.write(__os, change);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public StorageChangeResult end_changeStorageBatch(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __changeStorageBatch_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            StorageChangeResult __ret = null;
            __ret = StorageChangeResult.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __changeStorageBatch_completed(Ice.TwowayCallbackArg1<StorageChangeResult> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx __proxy = (io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx)__result.getProxy();
        StorageChangeResult __ret = null;
        try
        {
            __ret = __proxy.end_changeStorageBatch(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryGoodsAmount_name = "queryGoodsAmount";

    public StorageAmount queryGoodsAmount(StorageQuery query)
    {
        return queryGoodsAmount(query, null, false);
    }

    public StorageAmount queryGoodsAmount(StorageQuery query, java.util.Map<String, String> __ctx)
    {
        return queryGoodsAmount(query, __ctx, true);
    }

    private StorageAmount queryGoodsAmount(StorageQuery query, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryGoodsAmount_name);
        return end_queryGoodsAmount(begin_queryGoodsAmount(query, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query)
    {
        return begin_queryGoodsAmount(query, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, java.util.Map<String, String> __ctx)
    {
        return begin_queryGoodsAmount(query, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, Ice.Callback __cb)
    {
        return begin_queryGoodsAmount(query, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryGoodsAmount(query, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, Callback_GoodsStorageManageHandler_queryGoodsAmount __cb)
    {
        return begin_queryGoodsAmount(query, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, java.util.Map<String, String> __ctx, Callback_GoodsStorageManageHandler_queryGoodsAmount __cb)
    {
        return begin_queryGoodsAmount(query, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                  IceInternal.Functional_GenericCallback1<StorageAmount> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryGoodsAmount(query, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                  IceInternal.Functional_GenericCallback1<StorageAmount> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryGoodsAmount(query, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<StorageAmount> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryGoodsAmount(query, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<StorageAmount> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryGoodsAmount(query, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<StorageAmount> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryGoodsAmount(query, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<io.mycat.ep.v1.goods.stock.StorageAmount>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  GoodsStorageManageHandlerPrxHelper.__queryGoodsAmount_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_queryGoodsAmount(StorageQuery query, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryGoodsAmount_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryGoodsAmount_name, __cb);
        try
        {
            __result.prepare(__queryGoodsAmount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StorageQuery.__write(__os, query);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public StorageAmount end_queryGoodsAmount(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryGoodsAmount_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            StorageAmount __ret = null;
            __ret = StorageAmount.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryGoodsAmount_completed(Ice.TwowayCallbackArg1<StorageAmount> __cb, Ice.AsyncResult __result)
    {
        io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx __proxy = (io.mycat.ep.v1.goods.stock.GoodsStorageManageHandlerPrx)__result.getProxy();
        StorageAmount __ret = null;
        try
        {
            __ret = __proxy.end_queryGoodsAmount(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static GoodsStorageManageHandlerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static GoodsStorageManageHandlerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static GoodsStorageManageHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static GoodsStorageManageHandlerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static GoodsStorageManageHandlerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static GoodsStorageManageHandlerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, GoodsStorageManageHandlerPrx.class, GoodsStorageManageHandlerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::goods::stock::GoodsStorageManageHandler"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, GoodsStorageManageHandlerPrx v)
    {
        __os.writeProxy(v);
    }

    public static GoodsStorageManageHandlerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            GoodsStorageManageHandlerPrxHelper result = new GoodsStorageManageHandlerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
